/* * This class is the visual layout of the main chat GUI, after the  * client has established a connection with the server. */import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.border.Border;import javax.swing.border.EtchedBorder;import javax.swing.border.TitledBorder;import javax.swing.text.DefaultCaret;public class ChatScreen extends JPanel implements ActionListener, KeyListener{	private static final long serialVersionUID = 1479582758525703748L;		private ChatClientGUI outerFrame;	private JButton sendButton;	private JButton exitButton;	private JTextArea sendText;	private JTextArea chatArea;	private JList<String> usernameArea;	private DefaultListModel<String> usernameModel;		private ChatClient chatClient;	public ChatScreen(ChatClientGUI outerFrame) 	{		this.outerFrame = outerFrame;		this.chatClient = this.outerFrame.getChatClient();		setup();	}	private void setup()	{		setLayout(null);		Border raised = BorderFactory.createRaisedBevelBorder();		Border lowered = BorderFactory.createLoweredBevelBorder();		Border compound = BorderFactory.createCompoundBorder(raised, lowered);		Border etched = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);		TitledBorder title;						setBorder(compound);				JLabel windowTitle = new JLabel("Public Chat");		windowTitle.setBounds(7, 7, 623, 29);		windowTitle.setHorizontalAlignment(SwingConstants.CENTER);		windowTitle.setFont(new Font("Times New Roman", Font.PLAIN, 24));				sendText = new JTextArea(3, 120);		sendText.setFont(new Font("Arial Unicode MS", Font.PLAIN, 13));		sendText.setBounds(7, 358, 495, 90);		sendText.setLineWrap(true);		sendText.setWrapStyleWord(true);		sendText.addKeyListener(this);		title = BorderFactory.createTitledBorder(etched, "Outgoing Text");		title.setTitleFont(new Font("Arial Unicode MS", Font.PLAIN, 11));		sendText.setBorder(title);				sendButton = new JButton("Send");		sendButton.setFont(new Font("Arial Unicode MS", Font.PLAIN, 11));		sendButton.setBounds(513, 363, 115, 49);		sendButton.addActionListener(this);		exitButton = new JButton("Exit");		exitButton.setFont(new Font("Arial Unicode MS", Font.PLAIN, 11));		exitButton.setBounds(513, 416, 115, 30);		exitButton.addActionListener(this);		chatArea = new JTextArea(14, 42);		chatArea.setLineWrap(true);		chatArea.setWrapStyleWord(true);		chatArea.setEditable(false);		chatArea.setFont(new Font("Arial Unicode MS", Font.PLAIN, 13));		JScrollPane chatScroller = new JScrollPane(chatArea);		chatScroller.setBounds(7, 47, 495, 300);		chatScroller.setAutoscrolls(true);		title = BorderFactory.createTitledBorder(etched, "Main Chat");		title.setTitleFont(new Font("Arial Unicode MS", Font.PLAIN, 11));		chatScroller.setBorder(title);				DefaultCaret chatCaret = (DefaultCaret)chatArea.getCaret();		chatCaret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);				usernameModel = new DefaultListModel<String>();		usernameArea = new JList<String>(usernameModel);		usernameArea.setFont(new Font("Arial Unicode MS", Font.PLAIN, 13));		usernameArea.setVisibleRowCount(100);				JScrollPane usernameScroller = new JScrollPane(usernameArea);		usernameScroller.setBounds(512, 47, 118, 300);		title = BorderFactory.createTitledBorder(etched, "Users");		title.setTitleFont(new Font("Arial Unicode MS", Font.PLAIN, 11));		usernameScroller.setBorder(title);				add(windowTitle);		add(chatScroller);		add(usernameScroller);		add(sendText);		add(sendButton);		add(exitButton);				chatClient.setChatArea(chatArea);		chatClient.setUsernameModel(usernameModel);		chatClient.setUsernameArea(usernameArea);				sendText.requestFocus();	}		private void sendMessage() 	{		String message = String.format("%s", sendText.getText().trim());		if(message.length() > 0)		{			String[] parsedData = message.split(" ");						if(parsedData[0].equals("/w"))			{				message = "";								for(int i = 2; i < parsedData.length; i++)				{					if(i == parsedData.length - 1)						message += String.format("%s", parsedData[i]);					else						message += String.format("%s ", parsedData[i]);				}									chatClient.sendPrivateMessage(parsedData[1], message);			}			else			{				chatClient.sendGlobalMessage(message);			}						sendText.setText("");			sendText.requestFocus();		}			}		public void actionPerformed(ActionEvent evt) 	{		Object source = evt.getSource();		if (source == sendButton) 			sendMessage();		else if (source == exitButton)			System.exit(0);	}	public void keyPressed(KeyEvent e) 	{ 		if (e.getKeyCode() == KeyEvent.VK_ENTER)			sendMessage();	}	public void keyReleased(KeyEvent e) 	{ 			}	public void keyTyped(KeyEvent e)	{  			}}